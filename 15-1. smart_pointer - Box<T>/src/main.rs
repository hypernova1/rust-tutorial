/*
    포인터
        - 메모리의 주소 값을 담고 있는 변수
        - 주소 값은 힙영역의 데이터를 참조
        - & 심볼로 나타냄
        - 어떠한 오버헤드도 발생하지 않음

    스마트 포인터
        - 포인터 + 메타데이터
        - C++로부터 유래됨
        - 보통 구조체를 이용하여 구현되어 있음
            - 구조체에 Deref, Drop 트레잇 구현
                - Deref: 스마트 포인터 구조체의 인스턴스가 참조자처럼 동작하게 함
                - Drop: 스마트 포인터의 인스턴스가 스코프 밖으로 벗어났을 때 실행되는 코드를 커스터마이징 가능하게 함

    참조자와 스마트 포인터의 차이점
        - 참조자는 데이터를 빌리기만 하지만 스마트 포인터는 데이터를 소유함
*/



/*
    Box<T>
        - 힙에 있는 데이터를 가리키고 고정된 크기를 가짐
        - 데이터를 스택이 아닌 힙에 저장할 수 있도록 함
        - 아래의 세가지 상황에서 자주 쓰임
            - 컴파일 타임에 크기를 알 수 없는 타입을 갖고 있고 정확한 사이즈를 알 필요가 있는 맥락에서 해당 타입의 값을 이용하고 싶을 때
            - 커다란 데이터를 갖고 있고 소유권을 옮기고 싶지만 데이터가 복사되지 않을 것이라고 보장하기를 원할 때
            - 어떤 값을 소유하고 이 값의 구체화된 타입을 알고 있기 보다는 특정 트레잇을 구현한 타입이라는 점만 신경쓰고 싶을 때
*/

// enum List {
//     Cons(i32, List),
//     Nil,
// }

enum List {
    Cons(i32, Box<List>),
    Nil,
}

use List::{Cons, Nil};

fn main() {

    // Box를 사용하여 i32 값을 힙에 저장
    let b = Box::new(5);
    println!("b = {}", b);

    // 재귀 타입 가능
    // let list = Cons(1, Cons(2, Cons(3, Nil))); // 재귀 호출을 할 경우에 고정된 크기가 아니기 때문에 에러 발생

    // Box가 고정된 크기를 가지기 때문에 컴파일 가능
    let list = Cons(1,
                Box::new(Cons(2,
                  Box::new(Cons(3,
                    Box::new(Nil))))));
}
