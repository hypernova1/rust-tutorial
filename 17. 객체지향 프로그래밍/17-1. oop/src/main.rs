/*
    객체 지향 언어의 특성
        - 객체는 데이터와 동작을 담는다.
            - 러스트의 경우 구조체와 열거형은 데이터를 갖고 impl 블럭은 구조체와 열거형에 대한 메소드(동작)를 제공

        - 상세 구현을 은닉하는 캡슐화
            - 객체를 이용하는 코드에서 그 객체의 상세 구현에 접근할 수 없는 것
            - 객체와 상호작용은 공개 API를 통해서 함
            - 객체를 사용하는 코드는 직접 객체의 내부에 접근하여 데이터나 동작을 변경해서는 안 됨

        - 타입 시스템과 코드 공유로서의 상속
            - 러스트는 부모 구조체의 필드와 메소드의 상속 받는 구조체를 정의할 수 없음

        * 다형성
            - 다형성 != 상속
            - 다형성은 다수의 타입들의 데이터에 대해 동작 가능한 코드를 나타내는 더 범용적인 개념
            - 상속에서는 이런 타입들이 일반적으로 하위클래스에 해당
            - 러스트는 제네릭을 사용하여 호환 가능한 타입을 추상화하고, 트레잇 바운드를 이용하여 해당 타입들이 제공해야할 제약사항을 부과 (범주내 매개변수형 다형성)
*/

fn main() {
    println!("Hello, world!");
}
